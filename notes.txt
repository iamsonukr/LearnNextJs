components -> Class based || Functional components
           -> Client Side || Server Side
Client side -> if it runs in the browser it is the client side components
Server side -> if it runs on the server it is the server side components
Next js automatically converts every component to server component unless you instruct it not to useing "use client"

Client side rendering -> Server sends basic HTML and css file to the browser where it is rendered
Server side rendering -> Server process and render the html css on the server and sends fully rendered html and js code to the browser

Server side rendering imporve the SEO of the website because search engine can crawl the website more easily
Clint side makes it almost impossible for search engine to crawl the website because it is rendered on the client side and the search engine can't

Routing -> is the process of mapping the url to the component 
Next js has built in routing system called file based routing. It is based on the file system of the project. It means that if you have a file called index.js in the pages directory then it will be mapped to the root url of the website. If you have a file called about.js in the pages directory then it will be mapped to the url /about. If you have a file called contact.js in the pages directory then it will be mapped to the url /contact.

Automatic Code Splitting -> is the process of splitting the code into smaller chunks so that it can be loaded on demand. So when a user visit a page only the code that is required for that page is loaded. This makes the website faster and more efficient.

-> React requires manual configuration using Webpack to achieve this. But Next js does it automatically.

Next supports automatic font optimization, image optimization, and code splitting. 
It also supports server side rendering, static site generation, and internationalization. 
It also supports routing and API routes. It also supports getStaticProps and get ServerSideProps. 
It also supports getStaticPaths and getStaticProps. 
It also supports getServer SideProps and getStaticProps. 

Server Components are rendered only on the server. They are not sent to the browser as JavaScript. 
Instead, their rendered HTML is streamed to the client, 
improving performance by reducing bundle size and avoiding unnecessary client-side JavaScript.

Client Components are pre-rendered on the server and sent to the browser as HTML templates. 
Once they reach the browser, a process called hydration occurs. 
During hydration, React attaches event listeners and makes the component interactive by turning the static HTML into a live React component.

---------------- TO START --------------------
npx create-next-app@latest

page name inside any folder should always be page.tsx , but component name could be anything ...

Remember that in Next.js's app directory, special file names like page.tsx, layout.tsx, and route.ts have specific meanings, 
while your component files can follow whatever naming scheme you prefer.


---------------- DYNAMIC ROUTES --------------

dashboard/users/[id]

-> Here id is dynamic , it can be 1,... 2 ...or 3
-> GO to this page using <Link href={dashboard/users/1} >User One </Link>

import React from 'react'

const page = ({params}:{params:{id:string}}) => {
    const {id}=params
  return (
    <div className='3xl' >User {id}</div>
  )
}

export default page

------------Route Groups ------------

Route groups allow you to create files and folder without affecting the URL. (dashboar)/about  -> about 


----------- Error handleing ---------------

In next js there is a special file called error.js that cathes error and displayes them on UI.
Error will always render the nearest error.js page.


------------------ Layouts ------------------------

Layout is the starting point of any application . It is the top most component of the application.
put any component in Payout and it will save you from importing that component in each file it can be header footer etc.

-> In Next js Root layout is always required . It is the top most component of the application. It is the starting point of any application .
-> You can also create additional layouts for each routing page. For example, you can create a layout for the dashboard page and another for the about page. Name has to be layout.tsx in the page directory.
-> 


---------------------- DATA FETCHING -------------------

Server side fetching :
-> It fetches the data on ther server side before sending it to the client. It is the default method in Next.js.
-> It allows the crawlers to crawl the data and also it is good for SEO while in client side side fetching data enterd the html page after it has been loaded.
-> Server side fetchiing will display the data to browser even if the JS in disabled on it .
-> You need to write fewer lines of code.
-> It has imporved initial load time.
-> Reduces time for first content paint.
-> It is good for SEO. 
-> It has Automatic Request Deduplication.( Prevents duplication API calls )
-> It has improved Sercurity as all the requests are made on the server side.
-> Reduces Network Waterfall. Where api calles are made one after another. It parallaize them.
-> They can make direct database calls as these are React Server componet and can access database resource directly.



Client side fetching :
It is the opposite of server side fetching . It fetches the data on the client side after the page has been loader.

serverComponentHMRCache :- 
This options allows to cache fetch response in Server component across Hot module replacement replaces it in local component.


------- SERVER SIDE FETCHING TECHNIQUES -----------

1> STATIC SITE GENERATION (SSG) :----------------
-> HTML pages are generated at build time. It means content is created when the website is deployed not when you make a request.
-> It is extremly fast and can be served from the CDN but is not suitable for website needed frequently updated content.

By default NextJs uses static Rendering strategies in which results are cached and delivered through CDN


2> INCREMENTAL STATIC REGENERATION (ISR) :----------------

-> It is is an extension to SSG. It combines the effect of static generation with the ability to refresh and update content.
-> We can use ISR in two ways.
i> Time based revalidation :- It revalidates the page at a specified time. By using a variable
export const revalidate = 3600
> It is a route segment config.
> It will revalidate the page after 3600 seconds.

ii> It revalidate the particular page or api after a period of time.
const data=await fetch("https://api.vercel.app/blog",{
  next:{revalidate:3600}
})


3> SERVER SIDE RENDERING (SSR) :----------------
-> It generate an html page on the server with response to the user request.
-> It is slower than static site generation but faster than client side rendering.
-> It puts lot of pressure on server , But it always have upto date content.
-> Suitable for highly dynamic content and pages that require real time data.
-> It has similar config as ISR.

export const revalidate = 0 , : It will revalidate the page on every request.

for specefic requests :-
const data=await fetch("https://api.vercel.app/blog",{
  next:{revalidate:0}
})

or

const data=await fetch("https://api.vercel.app/blog",{
  cache:"no-store",
})

4> Partial prerendering :----------------
-> It combines static and dynamic rendering. 
-> It works by creating the layout of the data to be dynamically changed. 
-> It first shows the static data to the user and then fetches the dynamic data.


------------------- API Routes ---------------

-> To write backed in nextjs you need to create a folder named api and them a file in it with route.js
-> Routing strucure of the backed is similar to that of the frontend of nextjs.


------------------ Metadata setup --------------------------

There are two ways in which we can manage databse in our project 
1> Config based:-  create a js object in layout or any page file and export it, Next js will automatically detect it and convert it into relevent metadata tags.

export cont metadata={
  title:"My Blog",
  description:"This is my blog",
  image:"https://example.com/image.jpg",
  ... etc
}

